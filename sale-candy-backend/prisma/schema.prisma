// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Definir as tabelas do bando de dados
//user - product - order - order_item

// Tabela User: 
// Enum para definir tipo de usuario na tabela User
enum RoleTypeUser {
  ADMIN
  STANDARD
}

// Tabela User
model User {
  id        Int          @id @default(autoincrement())
  name      String       @db.VarChar(150)
  email     String       @unique @db.VarChar(50) // Email é unico
  password  String       @db.VarChar(255) // Valor grande para senha hash
  role      RoleTypeUser @default(STANDARD) // Usuario começa padrão
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  orders    Order[] // um usuario pode ter varios pedidos
}

// Tabela Order: 
// Enum para definir um status na tabela Order
enum OrderStatus {
  PENDING // Pedido criado, aguardando pagamento ou processamento
  PROCESSING // Pagamento confirmado, separando produtos/preparando
  SHIPPED // Pedido enviado (com rastreio, se aplicável)
  DELIVERED // Pedido entregue ao cliente
  CANCELLED // Pedido cancelado antes da entrega
  RETURNED // Produto devolvido após entrega
}

// Tabela Order
model Order {
  id          Int         @id @default(autoincrement())
  status      OrderStatus @default(PENDING) // Status padrão é PENDING
  totalAmount Decimal     @db.Decimal(10, 2) // Valor Decimal por ser moeda
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      Int? // Referencia ao Id da tabela User
  User        User?       @relation(fields: [userId], references: [id]) // cria a relação com o Usuario
  items       OrderItem[] // Um pedido pode ter varios itens, faz referencia a OrderItem
}

// Tabela Product:
model Product {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(150)
  description  String      @db.Text
  priceProduct Decimal     @db.Decimal(10, 2) // Valor Decimal por ser moeda
  stock        Int         @default(0) // Estoque inicial é 0
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[] // Um pedido pode ter varios itens (OrderItem)
}

// Tabela OrderItem: 
model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1) // A quantidade minima é 1
  price     Decimal  @db.Decimal(10, 2) // Valor Decimal por ser moeda
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int? // Referencia ao Id da tabela Product
  Product   Product? @relation(fields: [productId], references: [id]) // cria a relação ocm Produto.(Product)
  orderId   Int? // Referencia ao Id da tabela Order
  Order     Order?   @relation(fields: [orderId], references: [id]) // cria a relação com pedido (Order)
}
